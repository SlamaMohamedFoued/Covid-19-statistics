{"version":3,"sources":["Components/Cards/cards.module.css","Components/Cards/cards.jsx","api/index.js","Components/Chart/chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","Components/Chart/chart.module.css","Components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","Grid","container","spacing","justify","item","component","Card","xs","md","className","cx","styles","stat","infectedStat","CardContent","Typography","color","gutterBottom","infected","variant","end","value","duration","separator","Date","toDateString","recoveredStat","deathsStat","url","fetchData","country","a","changebleUrl","axios","get","console","log","fetchDailyData","modifiedData","map","el","total","date","reportDate","Countries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","options","legend","display","title","text","CountryPicker","props","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","form","NativeSelect","onChange","e","handleCountry","target","i","key","App","state","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9f152de9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stat\":\"cards_stat__1i9ha\",\"infected\":\"cards_infected__1d90A\",\"recovered\":\"cards_recovered__v-88O\",\"deaths\":\"cards_deaths__zKszO\",\"infectedStat\":\"cards_infectedStat__3iAr8\",\"recoveredStat\":\"cards_recoveredStat__2hVgy\",\"deathsStat\":\"cards_deathsStat__4NGb-\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return <div></div>;\r\n  } else\r\n    return (\r\n      <div>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.stat, styles.infectedStat)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                gutterBottom\r\n                className={styles.infected}\r\n              >\r\n                infected\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp end={confirmed.value} duration={2.75} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">Numbet of active</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.stat, styles.recoveredStat)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                gutterBottom\r\n                className={styles.recovered}\r\n              >\r\n                recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp end={recovered.value} duration={2.75} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {\" \"}\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">Number of recovered</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.stat, styles.deathsStat)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                gutterBottom\r\n                className={styles.deaths}\r\n              >\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp end={deaths.value} duration={2.75} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {\" \"}\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">Numbet of deaths</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  var changebleUrl = url;\r\n\r\n  if (country) {\r\n    changebleUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changebleUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    console.log(data);\r\n    const modifiedData = data.map((el) => ({\r\n      confirmed: el.confirmed.total,\r\n      deaths: el.deaths.total,\r\n      date: el.reportDate,\r\n    }));\r\n    console.log(modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const Countries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((el) => el.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./chart.module.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  console.log(data.confirmed);\r\n  //declaring state with hooks : stateName , the function used to chnage it and it's initial value {}\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    console.log(dailyData);\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        //this a map : mapping the dailyData array\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgb(255 , 0 , 0 , 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const BarChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"people\",\r\n            backgroundColor: [\"orange\", \"green\", \"red\"],\r\n            data: [\r\n              data.confirmed.value,\r\n              data.recovered.value,\r\n              data.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? BarChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { Countries } from \"../../api/index\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = (props) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setFetchedCountries(await Countries());\r\n    };\r\n\r\n    fetchCountries();\r\n    // console.log(fetchedCountries);\r\n  }, [fetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.form}>\r\n      <NativeSelect onChange={(e) => props.handleCountry(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((el, i) => (\r\n          <option key={i} value={el}>\r\n            {el}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport { Cards, Chart, CountryPicker } from \"./Components\";\nimport { fetchData } from \"./api/index\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data });\n    console.log(data);\n  }\n\n  handleCountry = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ country, data });\n  };\n  render() {\n    return (\n      <div className={styles.container}>\n        <Cards data={this.state.data} />\n        <CountryPicker\n          handleCountry={(country) => this.handleCountry(country)}\n        />\n        <Chart data={this.state.data} country={this.state.country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1iDuH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__YvwBx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CountryPicker_form__y6pAI\"};"],"sourceRoot":""}